package pedomock;

public class EventDetector implements SensorEventListener {
	
	private ExponentialMovingAverage avg;
	private long markDetection;
	private long minStepDuration;
	private long maxStepDuration;
	private long stepDelay;	
	private long initialStepMark;
	private boolean initialStepFound;
	private double vectorAverageDelta;
	
	/*
	 * alpha - factor for moving average
	 * cadence - time slot between steps
	 */
	public EventDetector(){
		avg = new ExponentialMovingAverage();
		markDetection = 0;
		stepDelay = 200;
		maxStepDuration = 600;
		minStepDuration = 200;
		initialStepFound = false;
		vectorAverageDelta = 0.1;
	}
	
	@Override
	public void onSensorChanged(SensorEvent event, long time) {
		detectStep(event, time);
		detectFall(event, time);
	}
	
	private void detectStep(SensorEvent event, long time){
		double vector = Math.sqrt(event.values[0]*event.values[0] + 
				event.values[1]*event.values[1] + 
				event.values[2]*event.values[2]);
		
		double average = avg.average(vector);
		
		if(time-markDetection < stepDelay)
			return;
		
		if(initialStepFound){
			if(time-markDetection < stepDelay && Math.abs(vector-average) < vectorAverageDelta){
				long duration = time-markDetection;
				if(duration > minStepDuration && duration < maxStepDuration){
					System.out.println(time);
					initialStepFound = false;
					markDetection = time;
				}
			}
		}
		else{
			if(time-markDetection < stepDelay && Math.abs(vector-average) < vectorAverageDelta){
				initialStepFound = true;
			}
		}
		
	}
	
	private void detectFall(SensorEvent event, long time){
		
	}
}
